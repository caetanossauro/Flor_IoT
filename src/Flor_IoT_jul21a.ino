#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/10207430-c98f-41d9-bd2b-5d466503366a 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperaturaAtual;
  float umidadeAtual;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHTesp.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>

#define DHT_PIN D2
DHTesp dht;

#define ON_Board_LED 2 

#define RELAY_PIN D1

const char* host = "script.google.com";
const int httpsPort = 443;
String appscriptID = "AKfycby8_fNDe2FfgIpH_9TIzKG89qhTMfRUVdC0_Q5rOh3_ZW38ALxxGL3ckFdaLLnZpDmdjw";

unsigned long lastDhtReadMillis = 0;
const long DHT_READ_INTERVAL = 15000; // 15 segundos 

unsigned long lastSendDataMillis = 0;
const long SEND_DATA_INTERVAL = 30 * 60 * 1000; // 30 minutos

WiFiClientSecure client;

void sendData(String nome, float temperaturaAtual, float umidadeAtual);
void verificarTempERele();
void enviarDadosPlanilha();

void verificarTempERele(){
  TempAndHumidity data = dht.getTempAndHumidity();

  if (isnan(data.temperature) || isnan(data.humidity)) {
    Serial.print("Falha ao ler o sensor DHT: ");
    Serial.println(dht.getStatusString());
    digitalWrite(ON_Board_LED, LOW);
    delay(2500);
    digitalWrite(ON_Board_LED, HIGH);
    delay(2500);
    return;
  }

  ::temperaturaAtual = data.temperature;
  ::umidadeAtual = data.humidity;

  Serial.print("Temperatura atual para verificacao: ");
  Serial.print(temperaturaAtual);
  Serial.println(" C");

  Serial.print("Umidade atual para verificacao: ");
  Serial.print(umidadeAtual);
  Serial.println("%");

  if (temperaturaAtual < 26.0){ // limite mínimo de temperatura para acionar o relé
    digitalWrite(RELAY_PIN, LOW);
    Serial.println("Temperatura abaixo de 26C. Acionando relé (se configurado).");
  } else {
    digitalWrite(RELAY_PIN, HIGH);
    Serial.println("Temperatura acima ou igual a 26C. Rele desativado.");
  }
}

void enviarDadosPlanilha() {
  String nome = WiFi.macAddress();
  
  TempAndHumidity data = dht.getTempAndHumidity();

  if (isnan(data.temperature) || isnan(data.humidity)) {
    Serial.print("Dados de temperatura/umidade invalidos para envio! Motivo: ");
    Serial.println(dht.getStatusString());
    digitalWrite(ON_Board_LED, LOW);
    delay(2500);
    digitalWrite(ON_Board_LED, HIGH);
    delay(2500);
    return;
  }

  ::temperaturaAtual = data.temperature;
  ::umidadeAtual = data.humidity;

  Serial.print("Enviando dados para planilha - MAC: ");
  Serial.print(nome);
  Serial.print(", Temp: ");
  Serial.print(temperaturaAtual);
  Serial.print("C, Hume: ");
  Serial.print(umidadeAtual);
  Serial.println("%");

  sendData(nome, temperaturaAtual, umidadeAtual);
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(500);

  pinMode(RELAY_PIN, OUTPUT);

  dht.setup(DHT_PIN, DHTesp::DHT22);

  client.setInsecure();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  unsigned long currentMillis = millis();

  if (currentMillis - lastDhtReadMillis >= DHT_READ_INTERVAL) {
    lastDhtReadMillis = currentMillis;
    verificarTempERele();
  }

  if (currentMillis - lastSendDataMillis >= SEND_DATA_INTERVAL) {
    lastSendDataMillis = currentMillis;
    enviarDadosPlanilha();
  }

  yield();
  
}

void sendData(String nome, float temperaturaAtual, float umidadeAtual) {
  
  Serial.println("==========");
  Serial.print("connecting to ");
  Serial.println(host);
  
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }
  
  String string_nome = String(nome); 
  String url = "/macros/s/" + appscriptID + "/exec?nome=" + String(nome) + "&temp=" + String(temperaturaAtual, 2) + "&hume=" + String(umidadeAtual, 2) ;
  Serial.print("requesting URL: ");
  Serial.println(url);

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
         "Host: " + host + "\r\n" +
         "User-Agent: BuildFailureDetectorESP8266\r\n" +
         "Connection: close\r\n\r\n");

  Serial.println("request sent");
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      Serial.println("headers received");
      break;
    }
  }
  String line = client.readStringUntil('\n');
  if (line.startsWith("{\"state\":\"success\"")) {
    Serial.println("esp8266/Arduino CI successfull!");
  } else {
    Serial.println("esp8266/Arduino CI has failed");
  }
  Serial.print("reply was : ");
  Serial.println(line);
  Serial.println("closing connection");
  Serial.println("==========");
  Serial.println();
}